name: test

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    name: Test
    runs-on: ubuntu-22.04
    env:
      CGO_CFLAGS_ALLOW: -Xpreprocessor
      VIPS_VERSION: 8.17.1
      V: 7

    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.25

      - name: Check out code
        uses: actions/checkout@v2

      - name: Install linux dependencies
        run: |
          # Add backports for updated libheif
          echo "deb http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/backports.list
          sudo apt-get update
          sudo apt-get install -y \
          meson ninja-build \
          libglib2.0-dev libexpat-dev librsvg2-dev libpng-dev \
          libjpeg-turbo8-dev libimagequant-dev libfftw3-dev \
          libpoppler-glib-dev libxml2-dev \
          libopenslide-dev libcfitsio-dev liborc-0.4-dev libpango1.0-dev \
          libtiff5-dev libgsf-1-dev giflib-tools libwebp-dev \
          libopenjp2-7-dev libcgif-dev wget
          sudo apt-get install -y -t jammy-backports libheif-dev

      - name: Install JPEG XL from official packages
        run: |
          # Download and install official JPEG XL packages for Ubuntu 22.04
          wget -q https://github.com/libjxl/libjxl/releases/download/v0.11.1/jxl-debs-amd64-ubuntu-22.04-v0.11.1.tar.gz || true
          tar xf jxl-debs-amd64-ubuntu-22.04-v0.11.1.tar.gz || true
          sudo dpkg -i libjxl_0.11.1_amd64.deb libjxl-dev_0.11.1_amd64.deb libjxl-gdk-pixbuf_0.11.1_amd64.deb libjxl-gimp-plugin_0.11.1_amd64.deb jxl_0.11.1_amd64.deb || true
          sudo apt-get install -f -y || true
          
          # Clean up
          rm -f jxl-debs-amd64-ubuntu-22.04-v0.11.1.tar.gz
          rm -rf jxl-debs-amd64-ubuntu-22.04-v0.11.1/ 2>/dev/null || true

      - name: Cache libvips
        uses: actions/cache@v3
        with:
          path: vips-${{ env.VIPS_VERSION }}
          key: ${{ runner.os }}-vips-${{ env.V }}-${{ env.VIPS_VERSION }}
          restore-keys: |
            ${{ runner.os }}-vips-${{ env.V }}-

      - name: Build libvips from source
        run: |
          if [ ! -d "vips-${{ env.VIPS_VERSION }}" ]
          then
            wget https://github.com/libvips/libvips/releases/download/v${{ env.VIPS_VERSION }}/vips-${{ env.VIPS_VERSION }}.tar.xz
            tar xf vips-${{ env.VIPS_VERSION }}.tar.xz
          fi
          cd vips-${{ env.VIPS_VERSION }}
          meson setup _build \
          --buildtype=release \
          --strip \
          --prefix=/usr/local \
          --libdir=lib \
          -Dmagick=disabled \
          -Djpeg-xl=enabled \
          -Dintrospection=disabled
          ninja -C _build
          sudo ninja -C _build install
          sudo ldconfig

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: make get

      - name: Test
        run: make test

      - name: Commit golden files
        if: github.event_name == 'pull_request'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "test: update golden files"
          file_pattern: "testdata/golden"

      - name: Coveralls
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: profile.cov
